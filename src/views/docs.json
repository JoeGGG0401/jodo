[
    {
        "key": 3,
        "title": "TODO LIST",
        "content": "1. (DONE)header 需要变成自适应（header 中的user 相关的操作变成一个 dropdown menu \n\n 2. 用户搜索到了用户后，可以对这个提出 follow 申请，目标用户会收到 notification，点击 notification 可以选择接收或者拒绝，接收后则在前者的 following list 里面加一个 user_uid，在后者的 follower list 里面加一个 user_uid \n\n 3. user 应该有一个 profile 页面，用来修改自己的名字和头像"
    },
    {
        "key": 1,
        "title": "用户数据结构",
        "content": "用户数据结构\n用户集合（Users）\n字段:\nuserId (主键): 唯一标识每个用户。\nemail: 用户的邮箱地址。\nname: 用户的姓名。\nrole: 用户角色（如“记录者”或“观察者”）。\nobservers: 观察者列表（存储观察者的userId）。\n日志子集合（Logs）\n所属：每个用户Users集合下的子集合。\n类型：可以是工作记录、休息记录、睡眠记录和走神记录。\n通用字段：\nlogId (主键): 唯一标识每条记录。\ntype: 记录类型（工作、休息、睡眠、走神）。\ntimestamp: 记录的时间戳。\ndetails: 记录的详细信息（结构根据类型不同而不同）。\n用户关系管理\n观察者和记录者的关系\n每个用户可以有一个或多个观察者。\n观察者可以访问其关联的记录者的日志。\n需要在应用层面实现适当的权限控制，确保观察者只能访问允许的信息。\n实现步骤\n用户角色和权限：\n\n在用户注册和管理界面中添加角色管理功能。\n实现权限逻辑，确保用户只能根据其角色访问相应的数据。\n日志记录与展示：\n\n设计不同类型的日志记录表单。\n根据用户角色展示相应的日志信息。\n观察者关联功能：\n\n允许用户邀请其他用户作为观察者。\n实现一个系统，让用户可以接受或拒绝成为观察者的邀请。\n数据访问和安全：\n\n通过Firebase的安全规则来控制数据访问权限。\n确保只有授权的用户能够访问敏感数据。\n"
    },
    {
        "key": 2,
        "title": "用户仪表板设计方案",
        "content": "1. 个人数据可视化\n这部分专注于展示用户自身的活动记录，如工作时间、休息时间和睡眠时间。\n\n功能和布局\n时间选择器：允许用户选择查看记录的时间范围（例如本周、本月）。\n数据统计卡片：以卡片形式展示关键数据，如本周总工作时间、休息时间和睡眠时间。\n图表展示：使用图表（如柱状图、饼图）展示时间分配和趋势分析。\n技术实现\n使用 Vue.js 构建界面。\n利用图表库（如 Chart.js 或 ECharts）来可视化数据。\n从后端或数据库（如 Firebase）获取数据。\n2. 观察用户的卡片\n这部分展示您正在观察的其他用户的基本信息和活动记录。\n\n功能和布局\n用户列表：显示您观察的用户列表。每个用户用一个卡片来表示。\n用户卡片：每个卡片包含用户的基本信息（如姓名、头像）。点击卡片可以查看该用户的非可编辑日历/记录页面。\n搜索和过滤：提供功能来搜索特定用户或按条件过滤用户列表。\n技术实现\n使用 Vue.js 构建界面。\n利用组件化的方法，为每个用户创建一个独立的卡片组件。\n从后端或数据库获取用户信息和记录。\n样式和用户体验\n响应式设计：确保界面在不同设备上均有良好展示。\n简洁明了的UI：界面应清晰易懂，便于用户快速找到所需信息。\n安全性\n权限管理：确保用户只能查看他们被授权观察的用户信息。\n数据保护：对敏感数据进行加密和安全处理。\n"
    }
]